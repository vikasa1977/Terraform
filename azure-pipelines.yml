# Azure DevOps YAML pipeline for Terraform AKS deployment

# Use the latest version of the pipeline runtime
pool:
  vmImage: 'ubuntu-latest'

# Define the steps in the pipeline
steps:

# Install Terraform
- task: TerraformInstaller@0
  inputs:
    terraformVersion: '0.14.4'
- task: AzureCLI@2
  inputs:
    azureSubscription: 'Vikas-Awate (1b2969cb-56c9-4ffb-8a3c-82adc7c5ad0c)' #replace with your
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: | 
     az account set --subscription "1b70a211-4952-4890-b6e3-7426a9962e92"

# Initialize Terraform
- task: TerraformTaskV1@0
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    backendType: 'azurerm'
    backendServiceArm: 'Vikas-Awate (1b2969cb-56c9-4ffb-8a3c-82adc7c5ad0c)'
    backendAzureRmStorageAccountName: 'terraformstatexlrwdrzs'
    backendAzureRmContainerName: 'tfstatefiles'
    backendAzureRmKey: 'aks-base.tfstate'
    backendAzureRmResourceGroupName: 'terraform-storage-rg'

# Plan the Terraform deployment
- task: TerraformTaskV1@0
  inputs:
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    environmentServiceNameAzureRM: 'Vikas-Awate (1b2969cb-56c9-4ffb-8a3c-82adc7c5ad0c)'
    #skip_provider_registration: 'true'

# Apply the Terraform deployment
- task: TerraformTaskV1@0
  inputs:
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    autoApprove: true
    environmentServiceNameAzureRM: 'Vikas-Awate (1b2969cb-56c9-4ffb-8a3c-82adc7c5ad0c)'

# Destroy the Terraform deployment
- task: TerraformTaskV1@0
  inputs:
    command: 'destroy'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    environmentServiceNameAzureRM: 'Vikas-Awate (1b2969cb-56c9-4ffb-8a3c-82adc7c5ad0c)'
    autoApprove: true
